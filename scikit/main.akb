from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix
import json
import logging
import numpy
import threading
import paho.mqtt.client as mqtt

logging.getLogger().setLevel(logging.INFO)

class ScikitModel():
    name = 'scikit'

    def __init__(self):
        hidden_layer_sizes = (30,30,30)
        self.classes = [0,1,2,3,4,5,6,7]
        self.model = MLPClassifier(hidden_layer_sizes=hidden_layer_sizes)

    def predict(self, samples):
        return self.model.predict(samples).tolist()

    def train(self, samples, labels):
        self.model.partial_fit(samples, labels, classes=self.classes)


lock = threading.Lock()
model = ScikitModel()
predict_topic = model.name + "/predict"
train_topic = model.name + "/train"
dps = 0

def on_connect(client, userdata, flags, rc):
    logging.info("Connected with result code "+str(rc))
    client.subscribe(predict_topic, qos=2)
    client.subscribe(train_topic, qos=2)


def on_message(client, userdata, msg):
#    logging.info('received message on topic {}'.format(msg.topic))
#    logging.info(msg.topic)
#    logging.info(predict_topic)
    if msg.topic == predict_topic:
        samples = json.loads(msg.payload.decode())['samples']
        try:
            model.predict(samples)
        except Exception as e:
            logging.info(e)
    elif msg.topic == train_topic:
        try:
            msg = json.loads(msg.payload.decode())
            lock.acquire()
            model.train(msg['samples'], msg['labels'])
            lock.release()
            global dps
            dps +=1
            logging.info("points: {}".format(dps))
        except Exception as e:
            logging.info(e)


client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect("broker", 1883, 60)
client.loop_forever()

