from falcon.media.validators import jsonschema
import falcon
from mxnet import nd
from mxnet.gluon import nn
import mxnet as mx


# model configuration
hidden_layer_sizes = (30,30,30)
classes = [0,1,2,3,4,5,6,7]
input_dim = 4
activation = 'relu'


# model config
model = nn.Sequential()
for size in hidden_layer_sizes:
    model.add(nn.Dense(size, activation=activation))
model.add(nn.Dense(len(classes), activation='sigmoid'))
model.initialize()
model.hybridize()

# learning rate change at following steps
lr_steps = [epoch * iterations_per_epoch for epoch in lr_epochs]
schedule = mx.lr_scheduler.MultiFactorScheduler(step=lr_steps, factor=lr_factor, base_lr=lr)
sgd_optimizer = mx.optimizer.SGD(learning_rate=0.001, lr_scheduler=schedule, momentum=momentum, wd=wd)
metric = mx.metric.Accuracy()
softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()


#model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


# http endpoint definition
class ModelResource(object):
    @jsonschema.validate({'samples': 'array'})
    def on_get(self, req, resp):
        resp.status = falcon.HTTP_200
        if req.media:
            resp.media = {'class':model.predict_classes(req.media['samples']).tolist()}
        else:
            resp.media = {'model':str(model)}

    @jsonschema.validate({'samples': 'array', 'classes':'array'})
    def on_post(self, req, resp):
        resp.status = falcon.HTTP_200
        model.fit(req.media['samples'], req.media['classes'])


# set up the wsgi webapp
app = falcon.API()
model_resource = ModelResource()
app.add_route('/', model_resource)

